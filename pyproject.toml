# (c) 2023 Giacomo Barone. All rights reserved.
# Software usage is hereby granted to the customer according to the terms in LICENSE file.

[build-system]
requires = ["setuptools>=60", "setuptools-scm>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "swap-anything"
# version = ""
dynamic = ["version"]
description = "A mix and match (swap) library to empower swapping-based projects."
authors = [
  { name = "@ggbaro", email = "46573388+ggbaro@users.noreply.github.com" },
]
maintainers = [
  { name = "@ggbaro", email = "46573388+ggbaro@users.noreply.github.com" },
]
readme = "README.md"
requires-python = ">=3.11,<3.12"
keywords = []
classifiers = [
  "Intended Audience :: Information Technology",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python",
  "Topic :: Internet",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development",
  "Typing :: Typed",
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
]
license = { file = "LICENSE" }

dependencies = [
  "pandas>=2,<3",
  "pydantic>=2,<3",
  "requests",
  "networkx>=3.1,<3.2",
  "pyairtable>=1.5.0,<1.6",
  "pydantic-settings",
]

[tool.setuptools_scm]

[project.optional-dependencies]
dev = ["black", "ruff", "pre-commit", "setuptools-scm"]

test = ["pytest", "pytest-cov", "Faker"]

docs = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings",
  "mkdocs-jupyter",
  "mkdocstrings[python]",
  "pytkdocs[numpy-style]",
]


[tool.black]
line-length = 88

[tool.coverage.report]
exclude_lines = ["if TYPE_CHECKING:", "if __name__ == .__main__.:", "no cov"]

[tool.coverage.run]
branch = true
parallel = true

[tool.isort]
profile = "black"

[tool.ruff]
select = [
  "E", # pycodestyle errors
  "W", # pycodestyle warnings
  "F", # pyflakes
  "I", # isort
  "C", # flake8-comprehensions
  "B", # flake8-bugbear
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
  "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-third-party = ["pydantic"]
